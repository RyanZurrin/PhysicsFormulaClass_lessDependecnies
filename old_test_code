    vector<double> v1 = {-3.489, -1.929, 9.193, 3.221, -4.491, 6.154,
                         -1.605, -4.176, -1.047};
    // test the matrixND class making a random matrix
    MatrixND<double> randMat(v1, 3, 3);
    cout  << "random matrix: " << endl << randMat << endl;

    // adjoint of the randMat
    MatrixND<double> adjugate = randMat.adjoint();
    cout << "adjoint of the random matrix: " << endl << adjugate << endl;

    // finding the inverse of a matrix
    MatrixND<double> invMat = randMat.inverse();
    cout << "inverse of random matrix: " << endl << invMat << endl;
    // finding the determinant of a matrix
    double det = randMat.determinant();
    std::cout << "The determinant of the matrix is: " << det << std::endl;
    // finding the transpose of a matrix
    MatrixND<double> transMat = randMat.transpose();
    cout << "transpose of random matrix: " << endl << transMat << endl;
    // finding the trace of a matrix
    double trace = randMat.trace();
    std::cout << "The trace of the matrix is: " << trace << std::endl;
    // finding the rank of a matrix
    int rank = randMat.rank();
    std::cout << "The rank of the matrix is: " << rank << std::endl;
    // finding the rref of a matrix
    MatrixND<double> rref = randMat.rref();
    cout << "rref of random matrix: " << endl << rref << endl;
    // finding the characteristic polynomial of a matrix
    vector<double> charPoly = randMat.characteristicPolynomial();
    cout << "characteristic polynomial of random matrix: " << endl;
    printVector(charPoly);

    // test multiplication of two matrices
    MatrixND<double> mat1(3,3,1.0,2.3,3.4,4.7,5.1,6.3,7.6,8.9,9.2);
    cout << "matrix 1: " << endl << mat1 << endl;
    MatrixND<double> mat2(3,3,1.3,2.4,3.5,4.6,5.7,6.8,7.9,8.0,9.1);
    cout << "matrix 2: " << endl << mat2 << endl;
    MatrixND<double> mat3 = mat1 * mat2;
    cout << "mat1 * mat2: " << endl << mat3 << endl;




    double M[3][4] = { {  1, 2, -1,  -4 },
                       {  2, 3, -1, -11 },
                       { -2, 0, -3,  22 } };

    rez::to_reduced_row_echelon_form(M);
    cout << "reduced row echelon form: " << endl;
    for (int i = 0; i < 3; ++i)
    {
        for (int j = 0; j < 4; ++j)
            std::cout << M[i][j] << '\t';
        std::cout << "\n";
    }

    //    auto q = constants::PROTON_CHARGE;
    //    vector<ld> charges = { q, q};
    //    vector<pair<ld, ld>> points = { {-1, 0}, {1, 0} };
    //    EMW::superpositionPrinciple(q, pair(0, 3), charges, points, true);

        auto q1 = UnitVector(pair(0, 3), pair(-1, 0));
        auto q2 = UnitVector(pair(1, 0), pair(0, 3));
        cout << "q1: " << endl;
        q1.print();
        cout << endl;
        cout << "q2: " << endl;
        q2.print();
        cout << endl;
        cout << "q1 + q2: " << endl;
        (q1 + q2).print();

            RGBABitmapImageReference *imageRef = CreateRGBABitmapImageReference();

            vector<double> x{-2, -1, 0, 1, 2};
            vector<double> y{2, -1, -2, -1, 2};
            vector<wchar_t> *value = nullptr;
            StringReference *stringRef = CreateStringReference(value);

            DrawScatterPlot(imageRef, 600, 400, &x, &y, stringRef);

            vector<double> *pngData = ConvertToPNG(imageRef->image);
            WriteToFile(pngData, "testPlots.png");
            DeleteImage(imageRef->image);


  //    double r1 = 2.0;
  //    double r2 = 5.0;
  //    double r3 = 1.0;
  //    double r4 = 7.0;
  //    double r5 = 3.0;
  //    double r6 = 3.0;
  //    double r7 = 3.0;

  //    ResistorNode R16({5.0, 10,  20.0}, 175.0, 's');
  //    R16.print();
  //    ResistorNode R162({R16.eR, r2}, 'p');
  //    ResistorNode R47({r4, r7}, 'p');
  //    ResistorNode R162345({R162.eR, r3, R47.eR, r5}, 's');
  //    R162345.print();
  //    CapacitorNode C1({2.0, 3.0, 5.0}, 50.0, 's');
  //    C1.print();

  //    CapacitorNode c345({3.0, 5.0, 6.0}, 'p');
  //    CapacitorNode c26({11.0, 3.0}, 's');
  //    CapacitorNode c23456({c345.eC, c26.eC}, 'p');
  //    CapacitorNode ctot({c23456.eC, 3.0}, 's');
  //    ctot.print();
  //    ResistorNode Rc({1.0, 3.0, Rd.eR}, 's');
  //    ResistorNode Re({2.0, Rf.eR}, 's');
  //    ResistorNode Requiv({Rc.eR, Re.eR}, 'p');
  //    Requiv.print();


//
//#include <chrono>
//
//
//#include <symengine/basic.h>
//#include <symengine/add.h>
//#include <symengine/symbol.h>
//#include <symengine/dict.h>
//#include <symengine/integer.h>
//#include <symengine/mul.h>
//#include <symengine/pow.h>
//
//using SymEngine::Basic;
//using SymEngine::Add;
//using SymEngine::Mul;
//using SymEngine::Pow;
//using SymEngine::Symbol;
//using SymEngine::symbol;
//using SymEngine::umap_basic_num;
//using SymEngine::map_vec_uint;
//using SymEngine::Integer;
//using SymEngine::integer;
//using SymEngine::multinomial_coefficients;
//using SymEngine::RCP;
//using SymEngine::rcp_dynamic_cast;
